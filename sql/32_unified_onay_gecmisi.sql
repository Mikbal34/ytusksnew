-- onay_gecmisi tablosunu geniÅŸlet - hem etkinlik hem belge onaylarÄ± iÃ§in
-- Tek tabloda tÃ¼m onay sÃ¼reÃ§lerini tutacaÄŸÄ±z

-- Ã–nce mevcut onay_gecmisi tablosunu kontrol edelim
DO $$
DECLARE
    onay_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO onay_count FROM public.onay_gecmisi;
    RAISE NOTICE 'ðŸ“Š Mevcut onay_gecmisi kayÄ±t sayÄ±sÄ±: %', onay_count;
END $$;

-- onay_gecmisi tablosuna yeni kolonlar ekle
ALTER TABLE public.onay_gecmisi 
ADD COLUMN IF NOT EXISTS onay_kategorisi VARCHAR NOT NULL DEFAULT 'Etkinlik';

ALTER TABLE public.onay_gecmisi 
ADD COLUMN IF NOT EXISTS belge_id UUID NULL;

ALTER TABLE public.onay_gecmisi 
ADD COLUMN IF NOT EXISTS belge_tipi VARCHAR NULL;

-- Yorum ekle
COMMENT ON COLUMN public.onay_gecmisi.onay_kategorisi IS 'Onay tÃ¼rÃ¼: Etkinlik veya Belge';
COMMENT ON COLUMN public.onay_gecmisi.belge_id IS 'Belge onaylarÄ± iÃ§in belge ID (etkinlik_belgeleri veya ek_belgeler)';
COMMENT ON COLUMN public.onay_gecmisi.belge_tipi IS 'Belge tablosu: etkinlik_belgeleri, ek_belgeler';

-- Var olan kayÄ±tlarÄ± gÃ¼ncelle (hepsi etkinlik onayÄ±)
UPDATE public.onay_gecmisi 
SET onay_kategorisi = 'Etkinlik' 
WHERE onay_kategorisi IS NULL OR onay_kategorisi = '';

-- Kontrol kÄ±sÄ±tlamalarÄ± ekle
ALTER TABLE public.onay_gecmisi 
ADD CONSTRAINT chk_onay_kategorisi 
CHECK (onay_kategorisi IN ('Etkinlik', 'Belge'));

ALTER TABLE public.onay_gecmisi 
ADD CONSTRAINT chk_belge_fields 
CHECK (
    (onay_kategorisi = 'Etkinlik' AND belge_id IS NULL AND belge_tipi IS NULL AND basvuru_id IS NOT NULL) OR
    (onay_kategorisi = 'Belge' AND belge_id IS NOT NULL AND belge_tipi IS NOT NULL AND belge_tipi IN ('etkinlik_belgeleri', 'ek_belgeler'))
);

-- JSONB belge onaylarÄ±nÄ± onay_gecmisi tablosuna migrate et
DO $$
DECLARE
    belge_rec RECORD;
    onay_id UUID;
BEGIN
    RAISE NOTICE 'ðŸ”„ Etkinlik belge onaylarÄ±nÄ± migrate ediliyor...';
    
    -- etkinlik_belgeleri tablosundaki JSONB onaylarÄ±
    FOR belge_rec IN 
        SELECT id, danisman_onay, sks_onay 
        FROM public.etkinlik_belgeleri 
        WHERE danisman_onay IS NOT NULL OR sks_onay IS NOT NULL
    LOOP
        -- DanÄ±ÅŸman onayÄ±nÄ± migrate et
        IF belge_rec.danisman_onay IS NOT NULL THEN
            INSERT INTO public.onay_gecmisi (
                onay_kategorisi,
                belge_id,
                belge_tipi,
                onay_tipi,
                durum,
                tarih,
                red_sebebi,
                onaylayan_id
            ) VALUES (
                'Belge',
                belge_rec.id,
                'etkinlik_belgeleri',
                'DanÄ±ÅŸman',
                belge_rec.danisman_onay->>'durum',
                (belge_rec.danisman_onay->>'tarih')::timestamp with time zone,
                belge_rec.danisman_onay->>'redSebebi',
                (belge_rec.danisman_onay->>'onaylayan_id')::uuid
            );
        END IF;
        
        -- SKS onayÄ±nÄ± migrate et
        IF belge_rec.sks_onay IS NOT NULL THEN
            INSERT INTO public.onay_gecmisi (
                onay_kategorisi,
                belge_id,
                belge_tipi,
                onay_tipi,
                durum,
                tarih,
                red_sebebi,
                onaylayan_id
            ) VALUES (
                'Belge',
                belge_rec.id,
                'etkinlik_belgeleri',
                'SKS',
                belge_rec.sks_onay->>'durum',
                (belge_rec.sks_onay->>'tarih')::timestamp with time zone,
                belge_rec.sks_onay->>'redSebebi',
                (belge_rec.sks_onay->>'onaylayan_id')::uuid
            );
        END IF;
    END LOOP;
    
    RAISE NOTICE 'âœ… Etkinlik belge onaylarÄ± migrate edildi';
END $$;

-- ek_belgeler JSONB onaylarÄ±nÄ± migrate et
DO $$
DECLARE
    ek_belge_rec RECORD;
BEGIN
    RAISE NOTICE 'ðŸ”„ Ek belge onaylarÄ±nÄ± migrate ediliyor...';
    
    FOR ek_belge_rec IN 
        SELECT id, danisman_onay, sks_onay 
        FROM public.ek_belgeler 
        WHERE danisman_onay IS NOT NULL OR sks_onay IS NOT NULL
    LOOP
        -- DanÄ±ÅŸman onayÄ±nÄ± migrate et
        IF ek_belge_rec.danisman_onay IS NOT NULL THEN
            INSERT INTO public.onay_gecmisi (
                onay_kategorisi,
                belge_id,
                belge_tipi,
                onay_tipi,
                durum,
                tarih,
                red_sebebi,
                onaylayan_id
            ) VALUES (
                'Belge',
                ek_belge_rec.id,
                'ek_belgeler',
                'DanÄ±ÅŸman',
                ek_belge_rec.danisman_onay->>'durum',
                (ek_belge_rec.danisman_onay->>'tarih')::timestamp with time zone,
                ek_belge_rec.danisman_onay->>'redSebebi',
                (ek_belge_rec.danisman_onay->>'onaylayan_id')::uuid
            );
        END IF;
        
        -- SKS onayÄ±nÄ± migrate et
        IF ek_belge_rec.sks_onay IS NOT NULL THEN
            INSERT INTO public.onay_gecmisi (
                onay_kategorisi,
                belge_id,
                belge_tipi,
                onay_tipi,
                durum,
                tarih,
                red_sebebi,
                onaylayan_id
            ) VALUES (
                'Belge',
                ek_belge_rec.id,
                'ek_belgeler',
                'SKS',
                ek_belge_rec.sks_onay->>'durum',
                (ek_belge_rec.sks_onay->>'tarih')::timestamp with time zone,
                ek_belge_rec.sks_onay->>'redSebebi',
                (ek_belge_rec.sks_onay->>'onaylayan_id')::uuid
            );
        END IF;
    END LOOP;
    
    RAISE NOTICE 'âœ… Ek belge onaylarÄ± migrate edildi';
END $$;

-- etkinlik_basvurulari JSONB onaylarÄ±nÄ± migrate et
DO $$
DECLARE
    basvuru_rec RECORD;
BEGIN
    RAISE NOTICE 'ðŸ”„ Etkinlik baÅŸvuru onaylarÄ±nÄ± migrate ediliyor...';
    
    FOR basvuru_rec IN 
        SELECT id, danisman_onay, sks_onay 
        FROM public.etkinlik_basvurulari 
        WHERE danisman_onay IS NOT NULL OR sks_onay IS NOT NULL
    LOOP
        -- DanÄ±ÅŸman onayÄ±nÄ± migrate et
        IF basvuru_rec.danisman_onay IS NOT NULL THEN
            INSERT INTO public.onay_gecmisi (
                onay_kategorisi,
                basvuru_id,
                onay_tipi,
                durum,
                tarih,
                red_sebebi,
                onaylayan_id
            ) VALUES (
                'Etkinlik',
                basvuru_rec.id,
                'DanÄ±ÅŸman',
                basvuru_rec.danisman_onay->>'durum',
                (basvuru_rec.danisman_onay->>'tarih')::timestamp with time zone,
                basvuru_rec.danisman_onay->>'redSebebi',
                (basvuru_rec.danisman_onay->>'onaylayan_id')::uuid
            );
        END IF;
        
        -- SKS onayÄ±nÄ± migrate et
        IF basvuru_rec.sks_onay IS NOT NULL THEN
            INSERT INTO public.onay_gecmisi (
                onay_kategorisi,
                basvuru_id,
                onay_tipi,
                durum,
                tarih,
                red_sebebi,
                onaylayan_id
            ) VALUES (
                'Etkinlik',
                basvuru_rec.id,
                'SKS',
                basvuru_rec.sks_onay->>'durum',
                (basvuru_rec.sks_onay->>'tarih')::timestamp with time zone,
                basvuru_rec.sks_onay->>'redSebebi',
                (basvuru_rec.sks_onay->>'onaylayan_id')::uuid
            );
        END IF;
    END LOOP;
    
    RAISE NOTICE 'âœ… Etkinlik baÅŸvuru onaylarÄ± migrate edildi';
END $$;

-- JSONB kolonlarÄ±nÄ± kaldÄ±r (artÄ±k gerekli deÄŸil)
ALTER TABLE public.etkinlik_basvurulari 
DROP COLUMN IF EXISTS danisman_onay,
DROP COLUMN IF EXISTS sks_onay;

ALTER TABLE public.etkinlik_belgeleri 
DROP COLUMN IF EXISTS danisman_onay,
DROP COLUMN IF EXISTS sks_onay;

ALTER TABLE public.ek_belgeler 
DROP COLUMN IF EXISTS danisman_onay,
DROP COLUMN IF EXISTS sks_onay;

-- Ä°ndeksleri kaldÄ±r
DROP INDEX IF EXISTS idx_etkinlik_basvurulari_danisman_onay;
DROP INDEX IF EXISTS idx_etkinlik_basvurulari_sks_onay;

-- Yeni indeksler ekle
CREATE INDEX IF NOT EXISTS idx_onay_gecmisi_basvuru_id 
ON public.onay_gecmisi (basvuru_id) 
WHERE onay_kategorisi = 'Etkinlik';

CREATE INDEX IF NOT EXISTS idx_onay_gecmisi_belge_id 
ON public.onay_gecmisi (belge_id, belge_tipi) 
WHERE onay_kategorisi = 'Belge';

CREATE INDEX IF NOT EXISTS idx_onay_gecmisi_kategori_durum 
ON public.onay_gecmisi (onay_kategorisi, durum, tarih);

-- BaÅŸarÄ± Ã¶zeti
DO $$
DECLARE
    etkinlik_onay_count INTEGER;
    belge_onay_count INTEGER;
    toplam_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO etkinlik_onay_count 
    FROM public.onay_gecmisi 
    WHERE onay_kategorisi = 'Etkinlik';
    
    SELECT COUNT(*) INTO belge_onay_count 
    FROM public.onay_gecmisi 
    WHERE onay_kategorisi = 'Belge';
    
    SELECT COUNT(*) INTO toplam_count FROM public.onay_gecmisi;
    
    RAISE NOTICE 'ðŸŽ‰ Unified onay_gecmisi sistemi hazÄ±r!';
    RAISE NOTICE 'ðŸ“Š Migration Ã¶zeti:';
    RAISE NOTICE '   â€¢ Etkinlik onaylarÄ±: %', etkinlik_onay_count;
    RAISE NOTICE '   â€¢ Belge onaylarÄ±: %', belge_onay_count;
    RAISE NOTICE '   â€¢ Toplam onay: %', toplam_count;
    RAISE NOTICE 'âœ… Tek tabloda tÃ¼m onay sÃ¼reÃ§leri!';
END $$;
