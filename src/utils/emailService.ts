import { EtkinlikBasvuru } from '../types';
import { supabase } from './supabase';

// Email gÃ¶nderiminin etkinleÅŸtirilip etkinleÅŸtirilmediÄŸini kontrol et
const isEmailEnabled = import.meta.env.VITE_EMAIL_ENABLED === 'true';

// Email bilgileri iÃ§in arayÃ¼z
interface EmailData {
  to: string;
  subject: string;
  html: string;
}

// Loglamak ve simule etmek iÃ§in email gÃ¶nderme fonksiyonu
export const sendEmail = async (emailData: EmailData): Promise<boolean> => {
  console.log('ğŸ“§ EMAIL SERVÄ°SÄ° - GÃ–NDERME SÄ°MÃœLASYONU');
  console.log(`ğŸ“§ AlÄ±cÄ±: ${emailData.to}`);
  console.log(`ğŸ“§ Konu: ${emailData.subject}`);
  console.log(`ğŸ“§ Ä°Ã§erik: ${emailData.html.substring(0, 150)}...`);
  
  if (isEmailEnabled) {
    // GerÃ§ek bir email gÃ¶nderimi yapÄ±labilir - burada sadece simÃ¼le ediliyor
    console.log('ğŸ“§ Email gÃ¶nderme aktif. GerÃ§ek entegrasyon iÃ§in bir sunucu gerekiyor.');
    
    // EÄŸer bir API endpoint'iniz varsa, email bilgilerini oraya gÃ¶nderebilirsiniz:
    // Ã¶rnek: await fetch('/api/send-email', { method: 'POST', body: JSON.stringify(emailData) });
    
    return true;
  } else {
    console.log('ğŸ“§ Email gÃ¶nderme devre dÄ±ÅŸÄ±.');
    return true;
  }
};

// Get kulÃ¼p baÅŸkanÄ± email from etkinlik
export const getKulupBaskanEmail = async (etkinlikId: string): Promise<string | null> => {
  try {
    // First, get the kulÃ¼p ID from the etkinlik
    const { data: etkinlikData, error: etkinlikError } = await supabase
      .from('etkinlik_basvurulari')
      .select('kulup_id')
      .eq('id', etkinlikId)
      .single();
    
    if (etkinlikError || !etkinlikData) {
      console.error('Error getting etkinlik data:', etkinlikError);
      return null;
    }
    
    // Get the kulÃ¼p baÅŸkanÄ± email using the kulÃ¼p ID
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('email')
      .eq('kulup_id', etkinlikData.kulup_id)
      .eq('role', 'kulup_baskani')
      .single();
    
    if (profileError || !profileData) {
      console.error('Error getting kulÃ¼p baÅŸkanÄ± email:', profileError);
      return null;
    }
    
    return profileData.email;
  } catch (error) {
    console.error('Error getting kulÃ¼p baÅŸkanÄ± email:', error);
    return null;
  }
};

// DanÄ±ÅŸman email'ini getir
export const getDanismanEmail = async (etkinlikId: string): Promise<string | null> => {
  try {
    // Etkinlikten kulÃ¼p ID'sini al
    const { data: etkinlikData, error: etkinlikError } = await supabase
      .from('etkinlik_basvurulari')
      .select('kulup_id')
      .eq('id', etkinlikId)
      .single();
    
    if (etkinlikError || !etkinlikData) {
      console.error('Error getting etkinlik data:', etkinlikError);
      return null;
    }
    
    // KulÃ¼p ID'si ile danÄ±ÅŸman ID'sini al - muhtemel sÃ¼tun adlarÄ± kullanÄ±lÄ±yor
    // Ã–nce tÃ¼m kulÃ¼p verilerini alalÄ±m
    const { data: kulupData, error: kulupError } = await supabase
      .from('kulupler')
      .select('*')  // TÃ¼m sÃ¼tunlarÄ± seÃ§
      .eq('id', etkinlikData.kulup_id)
      .single();
    
    if (kulupError || !kulupData) {
      console.error('Error getting kulÃ¼p data:', kulupError);
      return null;
    }
    
    // KulÃ¼p verisini inceleyelim ve danismanId, akademik_danisman_id gibi adlar kontrol edelim
    console.log('KulÃ¼p verisi:', kulupData);
    
    // OlasÄ± farklÄ± sÃ¼tun adlarÄ±
    const danismanId = kulupData.danisman_id || kulupData.danismanId || kulupData.akademik_danisman_id;
    
    if (!danismanId) {
      console.error('DanÄ±ÅŸman ID bulunamadÄ±. KulÃ¼p verileri:', kulupData);
      return null;
    }
    
    // DanÄ±ÅŸman ID'si ile danÄ±ÅŸman email'ini al
    const { data: danismanData, error: danismanError } = await supabase
      .from('akademik_danismanlar')
      .select('eposta')
      .eq('id', danismanId)
      .single();
    
    if (danismanError || !danismanData) {
      console.error('Error getting danÄ±ÅŸman email:', danismanError);
      return null;
    }
    
    return danismanData.eposta;
  } catch (error) {
    console.error('Error getting danÄ±ÅŸman email:', error);
    return null;
  }
};

// Get SKS email addresses
export const getSksEmails = async (): Promise<string[]> => {
  try {
    // Get all SKS emails
    const { data: sksData, error: sksError } = await supabase
      .from('sks_kullanicilari')
      .select('eposta');
    
    if (sksError || !sksData) {
      console.error('Error getting SKS emails:', sksError);
      return [];
    }
    
    return sksData.map(user => user.eposta);
  } catch (error) {
    console.error('Error getting SKS emails:', error);
    return [];
  }
};

// Send notification for new event creation
export const sendEtkinlikBasvuruNotification = async (etkinlik: EtkinlikBasvuru): Promise<void> => {
  try {
    // Get emails
    const kulupBaskanEmail = await getKulupBaskanEmail(etkinlik.id);
    const danismanEmail = await getDanismanEmail(etkinlik.id);
    
    // Send email to kulÃ¼p baÅŸkanÄ±
    if (kulupBaskanEmail) {
      await sendEmail({
        to: kulupBaskanEmail,
        subject: 'Etkinlik BaÅŸvurunuz AlÄ±ndÄ±',
        html: `
          <h1>Etkinlik BaÅŸvurunuz AlÄ±ndÄ±</h1>
          <p>SayÄ±n KulÃ¼p BaÅŸkanÄ±,</p>
          <p>"${etkinlik.etkinlikAdi}" etkinliÄŸi iÃ§in baÅŸvurunuz baÅŸarÄ±yla alÄ±nmÄ±ÅŸtÄ±r. BaÅŸvurunuz ÅŸu anda danÄ±ÅŸman onayÄ± beklemektedir.</p>
          <p>Etkinlik detaylarÄ±:</p>
          <ul>
            <li>Etkinlik AdÄ±: ${etkinlik.etkinlikAdi}</li>
            <li>Yer: ${etkinlik.etkinlikYeri.fakulte} - ${etkinlik.etkinlikYeri.detay}</li>
            <li>BaÅŸlangÄ±Ã§: ${new Date(etkinlik.baslangicTarihi).toLocaleString('tr-TR')}</li>
            <li>BitiÅŸ: ${new Date(etkinlik.bitisTarihi).toLocaleString('tr-TR')}</li>
          </ul>
          <p>Etkinlik baÅŸvurunuzun durumunu SKS sisteminden takip edebilirsiniz.</p>
        `
      });
    }
    
    // Send email to akademik danÄ±ÅŸman
    if (danismanEmail) {
      await sendEmail({
        to: danismanEmail,
        subject: 'Yeni Etkinlik BaÅŸvurusu - Onay Bekliyor',
        html: `
          <h1>Yeni Etkinlik BaÅŸvurusu - Onay Bekliyor</h1>
          <p>SayÄ±n Akademik DanÄ±ÅŸman,</p>
          <p>${etkinlik.kulupAdi} kulÃ¼bÃ¼ "${etkinlik.etkinlikAdi}" etkinliÄŸi iÃ§in yeni bir baÅŸvuru oluÅŸturdu. Bu etkinlik onayÄ±nÄ±zÄ± beklemektedir.</p>
          <p>Etkinlik detaylarÄ±:</p>
          <ul>
            <li>Etkinlik AdÄ±: ${etkinlik.etkinlikAdi}</li>
            <li>KulÃ¼p: ${etkinlik.kulupAdi}</li>
            <li>Yer: ${etkinlik.etkinlikYeri.fakulte} - ${etkinlik.etkinlikYeri.detay}</li>
            <li>BaÅŸlangÄ±Ã§: ${new Date(etkinlik.baslangicTarihi).toLocaleString('tr-TR')}</li>
            <li>BitiÅŸ: ${new Date(etkinlik.bitisTarihi).toLocaleString('tr-TR')}</li>
          </ul>
          <p>Etkinlik baÅŸvurusunu onaylamak veya reddetmek iÃ§in lÃ¼tfen SKS sistemine giriÅŸ yapÄ±nÄ±z.</p>
        `
      });
    }
  } catch (error) {
    console.error('Error sending etkinlik baÅŸvuru notifications:', error);
  }
};

// Send notification for danÄ±ÅŸman approval
export const sendDanismanOnayNotification = async (etkinlik: EtkinlikBasvuru): Promise<void> => {
  try {
    // Get emails
    const kulupBaskanEmail = await getKulupBaskanEmail(etkinlik.id);
    const sksEmails = await getSksEmails();
    
    // Send email to kulÃ¼p baÅŸkanÄ±
    if (kulupBaskanEmail) {
      await sendEmail({
        to: kulupBaskanEmail,
        subject: 'Etkinlik BaÅŸvurunuz DanÄ±ÅŸman TarafÄ±ndan OnaylandÄ±',
        html: `
          <h1>Etkinlik BaÅŸvurunuz DanÄ±ÅŸman TarafÄ±ndan OnaylandÄ±</h1>
          <p>SayÄ±n KulÃ¼p BaÅŸkanÄ±,</p>
          <p>"${etkinlik.etkinlikAdi}" etkinliÄŸi iÃ§in baÅŸvurunuz akademik danÄ±ÅŸmanÄ±nÄ±z tarafÄ±ndan onaylanmÄ±ÅŸtÄ±r. BaÅŸvurunuz ÅŸu anda SKS onayÄ± beklemektedir.</p>
          <p>Etkinlik baÅŸvurunuzun durumunu SKS sisteminden takip edebilirsiniz.</p>
        `
      });
    }
    
    // Send email to SKS personeli
    if (sksEmails.length > 0) {
      await sendEmail({
        to: sksEmails.join(','),
        subject: 'Yeni Etkinlik BaÅŸvurusu - SKS OnayÄ± Bekliyor',
        html: `
          <h1>Yeni Etkinlik BaÅŸvurusu - SKS OnayÄ± Bekliyor</h1>
          <p>SayÄ±n SKS Yetkilisi,</p>
          <p>${etkinlik.kulupAdi} kulÃ¼bÃ¼ tarafÄ±ndan oluÅŸturulan "${etkinlik.etkinlikAdi}" etkinliÄŸi akademik danÄ±ÅŸman tarafÄ±ndan onaylanmÄ±ÅŸ olup SKS onayÄ±nÄ± beklemektedir.</p>
          <p>Etkinlik detaylarÄ±:</p>
          <ul>
            <li>Etkinlik AdÄ±: ${etkinlik.etkinlikAdi}</li>
            <li>KulÃ¼p: ${etkinlik.kulupAdi}</li>
            <li>Yer: ${etkinlik.etkinlikYeri.fakulte} - ${etkinlik.etkinlikYeri.detay}</li>
            <li>BaÅŸlangÄ±Ã§: ${new Date(etkinlik.baslangicTarihi).toLocaleString('tr-TR')}</li>
            <li>BitiÅŸ: ${new Date(etkinlik.bitisTarihi).toLocaleString('tr-TR')}</li>
          </ul>
          <p>Etkinlik baÅŸvurusunu onaylamak veya reddetmek iÃ§in lÃ¼tfen SKS sistemine giriÅŸ yapÄ±nÄ±z.</p>
        `
      });
    }
  } catch (error) {
    console.error('Error sending danÄ±ÅŸman onay notifications:', error);
  }
};

// Send notification for danÄ±ÅŸman rejection
export const sendDanismanRedNotification = async (etkinlik: EtkinlikBasvuru, redSebebi?: string): Promise<void> => {
  try {
    // Get kulÃ¼p baÅŸkanÄ± email
    const kulupBaskanEmail = await getKulupBaskanEmail(etkinlik.id);
    
    // Send email to kulÃ¼p baÅŸkanÄ±
    if (kulupBaskanEmail) {
      await sendEmail({
        to: kulupBaskanEmail,
        subject: 'Etkinlik BaÅŸvurunuz DanÄ±ÅŸman TarafÄ±ndan Reddedildi',
        html: `
          <h1>Etkinlik BaÅŸvurunuz DanÄ±ÅŸman TarafÄ±ndan Reddedildi</h1>
          <p>SayÄ±n KulÃ¼p BaÅŸkanÄ±,</p>
          <p>"${etkinlik.etkinlikAdi}" etkinliÄŸi iÃ§in baÅŸvurunuz akademik danÄ±ÅŸmanÄ±nÄ±z tarafÄ±ndan reddedilmiÅŸtir.</p>
          ${redSebebi ? `<p><strong>Red Sebebi:</strong> ${redSebebi}</p>` : ''}
          <p>Etkinlik baÅŸvurunuzu dÃ¼zenleyerek tekrar gÃ¶nderebilirsiniz.</p>
        `
      });
    }
  } catch (error) {
    console.error('Error sending danÄ±ÅŸman red notification:', error);
  }
};

// Send notification for SKS approval
export const sendSksOnayNotification = async (etkinlik: EtkinlikBasvuru): Promise<void> => {
  try {
    // Get kulÃ¼p baÅŸkanÄ± and danÄ±ÅŸman emails
    const kulupBaskanEmail = await getKulupBaskanEmail(etkinlik.id);
    const danismanEmail = await getDanismanEmail(etkinlik.id);
    
    // Send email to kulÃ¼p baÅŸkanÄ±
    if (kulupBaskanEmail) {
      await sendEmail({
        to: kulupBaskanEmail,
        subject: 'Etkinlik BaÅŸvurunuz OnaylandÄ±',
        html: `
          <h1>Etkinlik BaÅŸvurunuz OnaylandÄ±</h1>
          <p>SayÄ±n KulÃ¼p BaÅŸkanÄ±,</p>
          <p>"${etkinlik.etkinlikAdi}" etkinliÄŸi iÃ§in baÅŸvurunuz SKS tarafÄ±ndan onaylanmÄ±ÅŸtÄ±r. EtkinliÄŸiniz artÄ±k resmi olarak gerÃ§ekleÅŸtirilmeye hazÄ±rdÄ±r.</p>
          <p>Etkinlik detaylarÄ±:</p>
          <ul>
            <li>Etkinlik AdÄ±: ${etkinlik.etkinlikAdi}</li>
            <li>Yer: ${etkinlik.etkinlikYeri.fakulte} - ${etkinlik.etkinlikYeri.detay}</li>
            <li>BaÅŸlangÄ±Ã§: ${new Date(etkinlik.baslangicTarihi).toLocaleString('tr-TR')}</li>
            <li>BitiÅŸ: ${new Date(etkinlik.bitisTarihi).toLocaleString('tr-TR')}</li>
          </ul>
        `
      });
    }
    
    // Send email to akademik danÄ±ÅŸman
    if (danismanEmail) {
      await sendEmail({
        to: danismanEmail,
        subject: 'Etkinlik BaÅŸvurusu OnaylandÄ±',
        html: `
          <h1>Etkinlik BaÅŸvurusu OnaylandÄ±</h1>
          <p>SayÄ±n Akademik DanÄ±ÅŸman,</p>
          <p>${etkinlik.kulupAdi} kulÃ¼bÃ¼ tarafÄ±ndan oluÅŸturulan "${etkinlik.etkinlikAdi}" etkinliÄŸi SKS tarafÄ±ndan onaylanmÄ±ÅŸtÄ±r.</p>
          <p>Etkinlik detaylarÄ±:</p>
          <ul>
            <li>Etkinlik AdÄ±: ${etkinlik.etkinlikAdi}</li>
            <li>KulÃ¼p: ${etkinlik.kulupAdi}</li>
            <li>Yer: ${etkinlik.etkinlikYeri.fakulte} - ${etkinlik.etkinlikYeri.detay}</li>
            <li>BaÅŸlangÄ±Ã§: ${new Date(etkinlik.baslangicTarihi).toLocaleString('tr-TR')}</li>
            <li>BitiÅŸ: ${new Date(etkinlik.bitisTarihi).toLocaleString('tr-TR')}</li>
          </ul>
        `
      });
    }
  } catch (error) {
    console.error('Error sending SKS onay notifications:', error);
  }
};

// Send notification for SKS rejection
export const sendSksRedNotification = async (etkinlik: EtkinlikBasvuru, redSebebi?: string): Promise<void> => {
  try {
    // Get kulÃ¼p baÅŸkanÄ± and danÄ±ÅŸman emails
    const kulupBaskanEmail = await getKulupBaskanEmail(etkinlik.id);
    const danismanEmail = await getDanismanEmail(etkinlik.id);
    
    // Send email to kulÃ¼p baÅŸkanÄ±
    if (kulupBaskanEmail) {
      await sendEmail({
        to: kulupBaskanEmail,
        subject: 'Etkinlik BaÅŸvurunuz SKS TarafÄ±ndan Reddedildi',
        html: `
          <h1>Etkinlik BaÅŸvurunuz SKS TarafÄ±ndan Reddedildi</h1>
          <p>SayÄ±n KulÃ¼p BaÅŸkanÄ±,</p>
          <p>"${etkinlik.etkinlikAdi}" etkinliÄŸi iÃ§in baÅŸvurunuz SKS tarafÄ±ndan reddedilmiÅŸtir.</p>
          ${redSebebi ? `<p><strong>Red Sebebi:</strong> ${redSebebi}</p>` : ''}
          <p>Etkinlik baÅŸvurunuzu dÃ¼zenleyerek tekrar gÃ¶nderebilirsiniz.</p>
        `
      });
    }
    
    // Send email to akademik danÄ±ÅŸman
    if (danismanEmail) {
      await sendEmail({
        to: danismanEmail,
        subject: 'Etkinlik BaÅŸvurusu SKS TarafÄ±ndan Reddedildi',
        html: `
          <h1>Etkinlik BaÅŸvurusu SKS TarafÄ±ndan Reddedildi</h1>
          <p>SayÄ±n Akademik DanÄ±ÅŸman,</p>
          <p>${etkinlik.kulupAdi} kulÃ¼bÃ¼ tarafÄ±ndan oluÅŸturulan "${etkinlik.etkinlikAdi}" etkinliÄŸi SKS tarafÄ±ndan reddedilmiÅŸtir.</p>
          ${redSebebi ? `<p><strong>Red Sebebi:</strong> ${redSebebi}</p>` : ''}
        `
      });
    }
  } catch (error) {
    console.error('Error sending SKS red notifications:', error);
  }
}; 